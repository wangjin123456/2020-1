1，代理模式整个应用场景
		1，打印日志
		2，rpc远程调用框架
		3，Mybatis mapper
		4,Aop
		5, 事务
		6， 自定义注解
		7，分布式全局id lcn seata 生成一个全部的事务id
		8，springboot全局捕获异常
2，代理模式的优点；
     减少代码冗余，提高代码复用性，安全，隐藏真实角色，非侵入性		
3，静态代理与动态代理
      静态代理： 需要开发者自己编写代理类
	     静态的实现方式： 继承（cglib）和实现接口（jdk 实现）
      动态代理设计需要写代理，统一用程序生成； 	  
4,静态代理模式缺陷
          需要每次人工编写代理类对象，代码非常冗余
5，动态代理		  
  	  jdk动态代理采用实现接口模式实现
	  CGLIB 动态代理 采用继承模式
	    最大优势 不需要写代理类对象通过程序生成
		      jdk动态代理采用实现接口模式实现：实现方式InvocationHandler
			  接口重写invoke 方式实现回调形式实现增强。拦截方式
			      
6，动态代理设计模式的核心：
	  生成代理类对象的思想
			1，使用java反射机制获取当前接口的信息，javase反射机制
			2， 拼接java代码，将java代码写入到本地文件
			3，将java代码编译成class文件
			4,程序直接读取该class文件到内存中即可
7，反射应用场景
1，jdbc驱动连接加载 class.foranme("")
2,SpringIOC容器框架<bean id="userService" class="类的完整路径">
3,自定义注解的（AOP-反射）
5，逆向生成java代码
6， 破解常用的单粒子方法
代理生成器 反射技术
8,Cglib 动态代理： 采用继承的模式生成代理类，底层基于ASM字节码技术实现生成代理类：
    1，生成class文件
	2，读取class文件到内存中
	采用fastClass 索引的机制执行我们的目标方法
  Cglib 的效率比jdk动态代理的效率要高；
观察者的基本概念：
当一个对象发送改变的时候可以通知给其他所有的对象；
*********************
事务的作用：
  保证我们数据一致性原则，遵循acid
  传统事务 mysql  
**************

1，ES是如何实现分布式高并发全文检索
2，简单介绍ES分片shards分片技术
3，为什么ES主分片对应的备份片不在同一台机器上
4，索引的主分片定义好后为什么不能做修改
5，ES如何实现高可用容错方案
6，搭建Linux上环境三台ES高可用集群环境；
*********
单例基本概念
在jvm中只会存在一个实例
单例的优缺点：
  优点：
     1，不会频繁的创建对象，节约内存
     2，访问速度快；
************************
责任链：
责任（单个业务逻辑）链（链表）
多个对象形成一个链，每个相互执行上和下一个对象
责任链应用场景：
1，过滤器
2，审批流程：
3，工作流框架
4，风控系统 	
*****************
锁
1，悲观锁和乐观锁
2，公平锁，非公平锁
3重入锁与非重入锁
4，自旋转锁
5，读写锁
线程池能够帮助解决的问题：
1，统一管理线程
2，采用复用机制较少cpu
3，提高效率 
	  
	threadpoolexcute
	threadpoolexcute
	可定长，可缓存，可定时，单例都是基于threadpoolExecutor
线程池实现原理分析：
复用： 一直开启线程实现复用：容器存放
核心： javaduili
***************************************
互联网安全架构设计
1什么是SpringSecurity
2,SpringSecurity 实现权限控制
3，SpringSecurityBasic 认证模式
4，SpringSecurity修改登录界面
5，数据库RBAC权限模型架构设计
6，SpringSecurity实现动态权限控制
Security作用
	1，权限控制： 
	     FromLogin（表单的形式），Basic 认证
**************************
 整合Jwt 实现前后端安全分离架构>>
		 

1，什么是jwt?与传统Token存在哪些区别
   Json web token  
   传统token: token 令牌 临时且唯一； 
             使用场景： 用户登录，传递参数
                 验证账号密码成功之后，生成token（使用uuid）作为redis的key,Value
                  就是真实的值：
 如何对请求与绑定会话信息：调用接口的时候，在请求头里传递token，从redis获取该tokenkey对应的value userid,获取
 userid的时候，查询用户信息；
 token对应存放的value 值放在第三方，数据库，redis
 jwt对应存放的token value 内容存放在客户端
 
2.如何使用Jwt实现用户授权认证

3，Jwt如何保证PayLoad内容安全性

4，使用Jwt 保存会话如何实现注销

5，SpringSecurity 整合jwt 认证授权
	
jwt组成部分：
第一部分 头部head
{
typ="jwt",
Alg="hs256"
}	
第二部分组成： payload 载和（不要放敏感数据）

第三部分 验证签名
	
	
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  